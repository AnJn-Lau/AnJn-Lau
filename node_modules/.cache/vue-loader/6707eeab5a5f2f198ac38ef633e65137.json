{"remainingRequest":"C:\\Users\\17239\\Desktop\\新疆移动网优大屏项目\\page0119\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\17239\\Desktop\\新疆移动网优大屏项目\\page0119\\src\\views\\components\\chart\\map.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\17239\\Desktop\\新疆移动网优大屏项目\\page0119\\src\\views\\components\\chart\\map.vue","mtime":1644478949416},{"path":"C:\\Users\\17239\\Desktop\\新疆移动网优大屏项目\\page0119\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\17239\\Desktop\\新疆移动网优大屏项目\\page0119\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\17239\\Desktop\\新疆移动网优大屏项目\\page0119\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}